// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpctesting/test.proto

/*
Package grpctesting is a generated protocol buffer package.

It is generated from these files:
	grpctesting/test.proto

It has these top-level messages:
	SimpleRequest
	SimpleResponse
	ProcessFileRequest
	ProcessFileResponse
*/
package grpctesting

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SimpleRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *SimpleRequest) Reset()                    { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string            { return proto.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()               {}
func (*SimpleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SimpleRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type SimpleResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *SimpleResponse) Reset()                    { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string            { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()               {}
func (*SimpleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SimpleResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ProcessFileRequest struct {
	Name []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ProcessFileRequest) Reset()                    { *m = ProcessFileRequest{} }
func (m *ProcessFileRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessFileRequest) ProtoMessage()               {}
func (*ProcessFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProcessFileRequest) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ProcessFileRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProcessFileResponse struct {
}

func (m *ProcessFileResponse) Reset()                    { *m = ProcessFileResponse{} }
func (m *ProcessFileResponse) String() string            { return proto.CompactTextString(m) }
func (*ProcessFileResponse) ProtoMessage()               {}
func (*ProcessFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*SimpleRequest)(nil), "grpcexpect.testing.SimpleRequest")
	proto.RegisterType((*SimpleResponse)(nil), "grpcexpect.testing.SimpleResponse")
	proto.RegisterType((*ProcessFileRequest)(nil), "grpcexpect.testing.ProcessFileRequest")
	proto.RegisterType((*ProcessFileResponse)(nil), "grpcexpect.testing.ProcessFileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestService service

type TestServiceClient interface {
	EmptyCall(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SimpleCall(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ProcessFile(ctx context.Context, in *ProcessFileRequest, opts ...grpc.CallOption) (*ProcessFileResponse, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) EmptyCall(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/grpcexpect.testing.TestService/EmptyCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) SimpleCall(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/grpcexpect.testing.TestService/SimpleCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ProcessFile(ctx context.Context, in *ProcessFileRequest, opts ...grpc.CallOption) (*ProcessFileResponse, error) {
	out := new(ProcessFileResponse)
	err := grpc.Invoke(ctx, "/grpcexpect.testing.TestService/ProcessFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceServer interface {
	EmptyCall(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
	SimpleCall(context.Context, *SimpleRequest) (*SimpleResponse, error)
	ProcessFile(context.Context, *ProcessFileRequest) (*ProcessFileResponse, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_EmptyCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).EmptyCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexpect.testing.TestService/EmptyCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).EmptyCall(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_SimpleCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).SimpleCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexpect.testing.TestService/SimpleCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).SimpleCall(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ProcessFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ProcessFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcexpect.testing.TestService/ProcessFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ProcessFile(ctx, req.(*ProcessFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcexpect.testing.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmptyCall",
			Handler:    _TestService_EmptyCall_Handler,
		},
		{
			MethodName: "SimpleCall",
			Handler:    _TestService_SimpleCall_Handler,
		},
		{
			MethodName: "ProcessFile",
			Handler:    _TestService_ProcessFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpctesting/test.proto",
}

func init() { proto.RegisterFile("grpctesting/test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x4e, 0xc3, 0x30,
	0x0c, 0xdd, 0x26, 0x04, 0xcc, 0x65, 0x1c, 0x8c, 0x98, 0xaa, 0x72, 0x81, 0x1c, 0x00, 0x81, 0x94,
	0x4a, 0x70, 0x85, 0x0b, 0x08, 0xce, 0xa8, 0x83, 0x0b, 0x27, 0xba, 0x62, 0xaa, 0x4a, 0x6d, 0x13,
	0xea, 0x14, 0xc1, 0x07, 0xf0, 0xdf, 0xa8, 0x09, 0x19, 0x9b, 0x06, 0xec, 0x14, 0xfb, 0xf9, 0x3d,
	0xdb, 0xcf, 0x0a, 0x8c, 0xf3, 0x46, 0x67, 0x86, 0xd8, 0x14, 0x75, 0x1e, 0x77, 0xaf, 0xd4, 0x8d,
	0x32, 0x0a, 0xb1, 0xc3, 0xe9, 0x5d, 0x53, 0x66, 0xe4, 0x77, 0x39, 0xda, 0xcb, 0x95, 0xca, 0x4b,
	0x8a, 0x2d, 0x63, 0xda, 0xbe, 0xc4, 0x54, 0x69, 0xf3, 0xe1, 0x04, 0xe2, 0x14, 0x46, 0x93, 0xa2,
	0xd2, 0x25, 0x25, 0xf4, 0xda, 0x12, 0x1b, 0x8c, 0x60, 0xb3, 0x65, 0x6a, 0xea, 0xb4, 0xa2, 0xb0,
	0xbf, 0xdf, 0x3f, 0x1e, 0x26, 0xb3, 0x5c, 0x9c, 0xc0, 0xb6, 0x27, 0xb3, 0x56, 0x35, 0x13, 0x86,
	0xb0, 0x51, 0x11, 0x73, 0x9a, 0x7b, 0xb2, 0x4f, 0xc5, 0x05, 0xe0, 0x5d, 0xa3, 0x32, 0x62, 0xbe,
	0x2d, 0x7e, 0xba, 0x23, 0xac, 0xcd, 0x3a, 0x6f, 0x25, 0x36, 0xee, 0xb0, 0xe7, 0xd4, 0xa4, 0xe1,
	0xc0, 0x61, 0x5d, 0x2c, 0x76, 0x61, 0x67, 0x41, 0xed, 0xc6, 0x9d, 0x7d, 0x0e, 0x20, 0xb8, 0x27,
	0x36, 0x13, 0x6a, 0xde, 0x8a, 0x8c, 0xf0, 0x12, 0x86, 0x37, 0x9d, 0x99, 0xeb, 0xb4, 0x2c, 0x71,
	0x2c, 0x9d, 0x51, 0xe9, 0x8d, 0x4a, 0x5b, 0x8b, 0xfe, 0xc0, 0x45, 0x0f, 0x1f, 0x00, 0x9c, 0x1f,
	0xab, 0x3f, 0x90, 0xcb, 0xc7, 0x93, 0x0b, 0xc7, 0x89, 0xc4, 0x7f, 0x14, 0xb7, 0xa3, 0xe8, 0xe1,
	0x13, 0x04, 0x73, 0xcb, 0xe3, 0xe1, 0x6f, 0xa2, 0xe5, 0xdb, 0x44, 0x47, 0x2b, 0x79, 0x7e, 0xc2,
	0xd5, 0xe8, 0x31, 0x98, 0xfb, 0x00, 0xd3, 0x75, 0xeb, 0xec, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0xfd, 0x08, 0x4d, 0x18, 0x16, 0x02, 0x00, 0x00,
}
